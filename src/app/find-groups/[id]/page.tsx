"use client";

import { useState } from "react";
import Link from "next/link";
import Header from "@/components/Header/Header";
import { useRouter } from "next/navigation";
import styles from "./page.module.css";

interface GroupMember {
  name: string;
  ownership: number;
  joinDate: string;
  avatar?: string;
  role: "admin" | "member";
}

interface Group {
  id: string;
  vehicleName: string;
  vehicleModel: string;
  region: string;
  purpose: string;
  currentMembers: number;
  neededMembers: number;
  availableOwnershipPct: number;
  status: "open" | "full";
  adminName: string;
  createdAt: string;
  members: GroupMember[];
  description: string;
  estimatedCost: number;
  monthlyCost: number;
  vehicleSpecs: {
    battery: string;
    range: string;
    charging: string;
    features: string[];
  };
  rules: string[];
  benefits: string[];
}

// Mock data - in real app, this would come from API
const MOCK_GROUP: Group = {
  id: "fg-01",
  vehicleName: "VinFast VF 8",
  vehicleModel: "Eco",
  region: "H√† N·ªôi",
  purpose: "ƒêi l·∫°i h√†ng ng√†y & du l·ªãch cu·ªëi tu·∫ßn",
  currentMembers: 3,
  neededMembers: 1,
  availableOwnershipPct: 25,
  status: "open",
  adminName: "Nguy·ªÖn VƒÉn A",
  createdAt: "2024-01-15",
  members: [
    { name: "Nguy·ªÖn VƒÉn A", ownership: 50, joinDate: "2024-01-15", role: "admin" },
    { name: "Tr·∫ßn Th·ªã B", ownership: 25, joinDate: "2024-01-20", role: "member" },
    { name: "L√™ VƒÉn C", ownership: 25, joinDate: "2024-01-25", role: "member" }
  ],
  description: "Nh√≥m ƒë·ªìng s·ªü h·ªØu VinFast VF8 cho nhu c·∫ßu ƒëi l·∫°i h√†ng ng√†y v√† du l·ªãch cu·ªëi tu·∫ßn. Xe ƒë∆∞·ª£c b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ v√† c√≥ b·∫£o hi·ªÉm ƒë·∫ßy ƒë·ªß. Ch√∫ng t√¥i t√¨m ki·∫øm th√†nh vi√™n th·ª© 4 ƒë·ªÉ ho√†n thi·ªán nh√≥m v√† b·∫Øt ƒë·∫ßu h√†nh tr√¨nh chia s·∫ª xe ƒëi·ªán.",
  estimatedCost: 850000000,
  monthlyCost: 2500000,
  vehicleSpecs: {
    battery: "87.7 kWh",
    range: "471 km (WLTP)",
    charging: "DC Fast Charge 150kW",
    features: ["ADAS", "OTA Updates", "Panoramic Sunroof", "Wireless Charging"]
  },
  rules: [
    "ƒê·∫∑t l·ªãch s·ª≠ d·ª•ng xe tr∆∞·ªõc √≠t nh·∫•t 24h",
    "Kh√¥ng h√∫t thu·ªëc trong xe",
    "B√°o c√°o s·ª± c·ªë ngay khi ph√°t hi·ªán",
    "ƒê·ªï xƒÉng/ƒëi·ªán ƒë·∫ßy tr∆∞·ªõc khi tr·∫£ xe",
    "Kh√¥ng s·ª≠ d·ª•ng xe cho m·ª•c ƒë√≠ch th∆∞∆°ng m·∫°i"
  ],
  benefits: [
    "Ti·∫øt ki·ªám chi ph√≠ s·ªü h·ªØu xe",
    "Chia s·∫ª tr√°ch nhi·ªám b·∫£o d∆∞·ª°ng",
    "Linh ho·∫°t trong vi·ªác s·ª≠ d·ª•ng",
    "K·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng EV",
    "H·ªó tr·ª£ b·∫£o hi·ªÉm to√†n di·ªán"
  ]
};

export default function GroupDetailPage({ params }: { params: { id: string } }) {
  const [showJoinForm, setShowJoinForm] = useState(false);
  const [joinMessage, setJoinMessage] = useState("");
  const router = useRouter();

  const handleNavClick = (index: number) => {
    const routes = ["/home", "/groups", "/find-groups", "/dashboard", "/provider", "/about", "/contact"];
    if (routes[index]) {
      router.push(routes[index]);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const handleJoinRequest = () => {
    if (joinMessage.trim()) {
      alert(`ƒê√£ g·ª≠i y√™u c·∫ßu tham gia nh√≥m v·ªõi l·ªùi nh·∫Øn: "${joinMessage}". Admin s·∫Ω xem x√©t v√† ph·∫£n h·ªìi trong v√≤ng 24h.`);
      setShowJoinForm(false);
      setJoinMessage("");
    } else {
      alert("Vui l√≤ng nh·∫≠p l·ªùi nh·∫Øn cho Admin nh√≥m.");
    }
  };

  return (
    <>
      <Header headerHidden={false} currentSection={2} goToSection={handleNavClick} />
      <main className={styles.container}>
        {/* Breadcrumb */}
        <nav className={styles.breadcrumb}>
          <Link href="/find-groups" className={styles.breadcrumbLink}>
            T√¨m & Tham gia nh√≥m
          </Link>
          <span className={styles.breadcrumbSeparator}>‚Ä∫</span>
          <span className={styles.breadcrumbCurrent}>{MOCK_GROUP.vehicleName}</span>
        </nav>

        {/* Group Header */}
        <section className={styles.groupHeader}>
          <div className={styles.vehicleInfo}>
            <h1 className={styles.vehicleName}>{MOCK_GROUP.vehicleName}</h1>
            <p className={styles.vehicleModel}>{MOCK_GROUP.vehicleModel}</p>
            <div className={styles.groupMeta}>
              <span className={styles.region}>üìç {MOCK_GROUP.region}</span>
              <span className={styles.purpose}>üéØ {MOCK_GROUP.purpose}</span>
            </div>
          </div>
          <div className={styles.groupStatus}>
            <span className={`${styles.statusBadge} ${styles[`status${MOCK_GROUP.status.charAt(0).toUpperCase() + MOCK_GROUP.status.slice(1)}`]}`}>
              {MOCK_GROUP.status === "open" ? "ƒêang m·ªü" : "ƒê√£ ƒë·∫ßy"}
            </span>
            <div className={styles.memberCount}>
              {MOCK_GROUP.currentMembers} / {MOCK_GROUP.currentMembers + MOCK_GROUP.neededMembers} th√†nh vi√™n
            </div>
          </div>
        </section>

        {/* Main Content */}
        <div className={styles.mainContent}>
          <div className={styles.contentLeft}>
            {/* Description */}
            <section className={styles.section}>
              <h2 className={styles.sectionTitle}>M√¥ t·∫£ nh√≥m</h2>
              <p className={styles.description}>{MOCK_GROUP.description}</p>
            </section>

            {/* Vehicle Specifications */}
            <section className={styles.section}>
              <h2 className={styles.sectionTitle}>Th√¥ng s·ªë k·ªπ thu·∫≠t xe</h2>
              <div className={styles.specsGrid}>
                <div className={styles.specItem}>
                  <div className={styles.specLabel}>Pin</div>
                  <div className={styles.specValue}>{MOCK_GROUP.vehicleSpecs.battery}</div>
                </div>
                <div className={styles.specItem}>
                  <div className={styles.specLabel}>T·∫ßm ho·∫°t ƒë·ªông</div>
                  <div className={styles.specValue}>{MOCK_GROUP.vehicleSpecs.range}</div>
                </div>
                <div className={styles.specItem}>
                  <div className={styles.specLabel}>S·∫°c nhanh</div>
                  <div className={styles.specValue}>{MOCK_GROUP.vehicleSpecs.charging}</div>
                </div>
              </div>
              <div className={styles.features}>
                <h3 className={styles.featuresTitle}>T√≠nh nƒÉng n·ªïi b·∫≠t</h3>
                <div className={styles.featuresList}>
                  {MOCK_GROUP.vehicleSpecs.features.map((feature, index) => (
                    <span key={index} className={styles.featureTag}>{feature}</span>
                  ))}
                </div>
              </div>
            </section>

            {/* Group Rules */}
            <section className={styles.section}>
              <h2 className={styles.sectionTitle}>Quy ƒë·ªãnh nh√≥m</h2>
              <ul className={styles.rulesList}>
                {MOCK_GROUP.rules.map((rule, index) => (
                  <li key={index} className={styles.ruleItem}>{rule}</li>
                ))}
              </ul>
            </section>

            {/* Benefits */}
            <section className={styles.section}>
              <h2 className={styles.sectionTitle}>L·ª£i √≠ch tham gia</h2>
              <ul className={styles.benefitsList}>
                {MOCK_GROUP.benefits.map((benefit, index) => (
                  <li key={index} className={styles.benefitItem}>{benefit}</li>
                ))}
              </ul>
            </section>
          </div>

          <div className={styles.contentRight}>
            {/* Join Request Card */}
            <div className={styles.joinCard}>
              <h3 className={styles.joinTitle}>Tham gia nh√≥m</h3>
              <div className={styles.ownershipInfo}>
                <div className={styles.ownershipBar}>
                  <div 
                    className={styles.ownershipFill}
                    style={{ width: `${100 - MOCK_GROUP.availableOwnershipPct}%` }}
                  />
                </div>
                <div className={styles.ownershipText}>
                  T·ª∑ l·ªá s·ªü h·ªØu c√≤n l·∫°i: {MOCK_GROUP.availableOwnershipPct}%
                </div>
              </div>
              
              <div className={styles.costInfo}>
                <div className={styles.costRow}>
                  <span className={styles.costLabel}>Gi√° xe ∆∞·ªõc t√≠nh:</span>
                  <span className={styles.costValue}>{formatCurrency(MOCK_GROUP.estimatedCost)}</span>
                </div>
                <div className={styles.costRow}>
                  <span className={styles.costLabel}>Chi ph√≠ h√†ng th√°ng:</span>
                  <span className={styles.costValue}>{formatCurrency(MOCK_GROUP.monthlyCost)}</span>
                </div>
                <div className={styles.costRow}>
                  <span className={styles.costLabel}>Chi ph√≠ s·ªü h·ªØu ({MOCK_GROUP.availableOwnershipPct}%):</span>
                  <span className={styles.costValue}>{formatCurrency(MOCK_GROUP.estimatedCost * MOCK_GROUP.availableOwnershipPct / 100)}</span>
                </div>
              </div>

              {!showJoinForm ? (
                <button
                  className={styles.joinBtn}
                  onClick={() => setShowJoinForm(true)}
                  disabled={MOCK_GROUP.status === "full"}
                >
                  {MOCK_GROUP.status === "full" ? "Nh√≥m ƒë√£ ƒë·∫ßy" : "G·ª≠i y√™u c·∫ßu tham gia"}
                </button>
              ) : (
                <div className={styles.joinForm}>
                  <textarea
                    className={styles.joinMessage}
                    placeholder="Nh·∫≠p l·ªùi nh·∫Øn cho Admin nh√≥m (t√πy ch·ªçn)..."
                    value={joinMessage}
                    onChange={(e) => setJoinMessage(e.target.value)}
                    rows={4}
                  />
                  <div className={styles.joinFormActions}>
                    <button
                      className={styles.cancelBtn}
                      onClick={() => setShowJoinForm(false)}
                    >
                      H·ªßy
                    </button>
                    <button
                      className={styles.submitBtn}
                      onClick={handleJoinRequest}
                    >
                      G·ª≠i y√™u c·∫ßu
                    </button>
                  </div>
                </div>
              )}
            </div>

            {/* Members */}
            <div className={styles.membersCard}>
              <h3 className={styles.membersTitle}>Th√†nh vi√™n hi·ªán t·∫°i</h3>
              <div className={styles.membersList}>
                {MOCK_GROUP.members.map((member, index) => (
                  <div key={index} className={styles.memberItem}>
                    <div className={styles.memberAvatar}>
                      {member.name.charAt(0)}
                    </div>
                    <div className={styles.memberInfo}>
                      <div className={styles.memberName}>
                        {member.name}
                        {member.role === "admin" && <span className={styles.adminBadge}>Admin</span>}
                      </div>
                      <div className={styles.memberOwnership}>{member.ownership}% s·ªü h·ªØu</div>
                      <div className={styles.memberJoinDate}>
                        Tham gia: {new Date(member.joinDate).toLocaleDateString('vi-VN')}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Group Info */}
            <div className={styles.infoCard}>
              <h3 className={styles.infoTitle}>Th√¥ng tin nh√≥m</h3>
              <div className={styles.infoList}>
                <div className={styles.infoItem}>
                  <span className={styles.infoLabel}>Admin:</span>
                  <span className={styles.infoValue}>{MOCK_GROUP.adminName}</span>
                </div>
                <div className={styles.infoItem}>
                  <span className={styles.infoLabel}>T·∫°o ng√†y:</span>
                  <span className={styles.infoValue}>{new Date(MOCK_GROUP.createdAt).toLocaleDateString('vi-VN')}</span>
                </div>
                <div className={styles.infoItem}>
                  <span className={styles.infoLabel}>Tr·∫°ng th√°i:</span>
                  <span className={styles.infoValue}>
                    {MOCK_GROUP.status === "open" ? "ƒêang t√¨m th√†nh vi√™n" : "ƒê√£ ƒë·∫ßy"}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
